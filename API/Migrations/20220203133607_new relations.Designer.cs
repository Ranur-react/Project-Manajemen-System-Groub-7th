// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220203133607_new relations")]
    partial class newrelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredToken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Last_online")
                        .HasColumnType("datetime2");

                    b.Property<int>("OTP")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Tb_M_Accounts");
                });

            modelBuilder.Entity("API.Models.AssignEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdProject")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status_Assign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdProject");

                    b.ToTable("Tb_T_AssignEmployees");
                });

            modelBuilder.Entity("API.Models.DevelopTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProgres")
                        .HasColumnType("int");

                    b.Property<int>("StatusTask")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Worker")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdProgres");

                    b.HasIndex("Worker");

                    b.ToTable("Tb_T_DevelopTasks");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tb_M_Employees");
                });

            modelBuilder.Entity("API.Models.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgresDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgressStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Approver");

                    b.ToTable("Tb_M_Progress");
                });

            modelBuilder.Entity("API.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tb_M_Projects");
                });

            modelBuilder.Entity("API.Models.ProjectHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProgres")
                        .HasColumnType("int");

                    b.Property<string>("IdProject")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdProgres");

                    b.HasIndex("IdProject");

                    b.ToTable("Tb_T_ProjectHistorys");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tb_M_Roles");
                });

            modelBuilder.Entity("API.Models.TestingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTask")
                        .HasColumnType("int");

                    b.Property<int>("TestStatus")
                        .HasColumnType("int");

                    b.Property<string>("Tester")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdTask");

                    b.HasIndex("Tester");

                    b.ToTable("Tb_T_TestTasks");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Employee", "Employee")
                        .WithOne("Accounts")
                        .HasForeignKey("API.Models.Account", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.AssignEmployee", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("AssignEmployee")
                        .HasForeignKey("IdEmployee");

                    b.HasOne("API.Models.Project", "Project")
                        .WithMany("AssignEmployee")
                        .HasForeignKey("IdProject");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("API.Models.DevelopTask", b =>
                {
                    b.HasOne("API.Models.Progress", "Progress")
                        .WithMany("DevelopTask")
                        .HasForeignKey("IdProgres")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("DevelopTask")
                        .HasForeignKey("Worker");

                    b.Navigation("Employee");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("API.Models.Progress", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("Progress")
                        .HasForeignKey("Approver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.ProjectHistory", b =>
                {
                    b.HasOne("API.Models.Progress", "Progress")
                        .WithMany("ProjectHistory")
                        .HasForeignKey("IdProgres")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Project", "Project")
                        .WithMany("ProjectHistory")
                        .HasForeignKey("IdProject");

                    b.Navigation("Progress");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("API.Models.TestingTask", b =>
                {
                    b.HasOne("API.Models.DevelopTask", "DevelopTask")
                        .WithMany("TestingTask")
                        .HasForeignKey("IdTask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("TestingTask")
                        .HasForeignKey("Tester");

                    b.Navigation("DevelopTask");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.DevelopTask", b =>
                {
                    b.Navigation("TestingTask");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AssignEmployee");

                    b.Navigation("DevelopTask");

                    b.Navigation("Progress");

                    b.Navigation("TestingTask");
                });

            modelBuilder.Entity("API.Models.Progress", b =>
                {
                    b.Navigation("DevelopTask");

                    b.Navigation("ProjectHistory");
                });

            modelBuilder.Entity("API.Models.Project", b =>
                {
                    b.Navigation("AssignEmployee");

                    b.Navigation("ProjectHistory");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
